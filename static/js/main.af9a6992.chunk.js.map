{"version":3,"sources":["components/Toolbar.js","web3/connectors.js","components/WalletConnector.js","components/Front.js","containers/Home.js","containers/Native.js","containers/Tokens.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","useState","menuClick","e","Menu","pointing","secondary","Item","as","Link","name","onClick","to","position","injectedConnector","InjectedConnector","supportedChainIds","fetcher","library","abi","args","arg1","arg2","params","isAddress","address","method","contract","Contract","getSigner","Balance","useWeb3React","account","chainId","useSWR","ERC20","balance","data","mutate","useEffect","on","undefined","removeAllListeners","parseFloat","formatEther","toPrecision","Front","onButtonClick","Container","textAlign","Button","basic","color","Home","activate","active","console","log","Wallet","Divider","totalWeeklyReward","weeklyPerToker","highestWeeklyEarner","totalRewards","tokerRatio","Grid","centered","Row","columns","Column","Native","textValue","setTextValue","currency","setCurrency","handleClick","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","tempArray","valueOf","split","oddArray","filter","v","i","evenArray","addArray","amtArray","total","length","isNaN","push","trim","toString","disperseContract","disperse","disperseSigned","connect","overrides","value","utils","parseEther","tokerRewardsEth","alert","width","Form","Field","Header","Content","TextArea","placeholder","onChange","target","UNIT","Tokens","tokenAddress","setTokenAddress","disableDisperse","setDisableDisperse","disableApprove","setDisableApprove","addressArray","setAddressArray","amountArray","setAmountArray","handleApprove","erc20Contract","erc20Signed","allowance","BigNumber","multipliedBy","toHex","approve","handleDisperse","tokerRewards","Input","focus","disabled","getLibrary","connector","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af9a6992.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Toolbar = () => {\n  const [activeItem, setActiveItem] = useState(\"DEX\");\n\n  const menuClick = (e) => {\n    //setActiveItem({ name });\n    //console.log(e);\n  };\n  return (\n    <Menu pointing secondary>\n      <Menu.Item\n        as={Link}\n        name=\"The Midnight Tokers Club\"\n        onClick={menuClick}\n        to=\"/\"\n      />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item as={Link} name=\"Matic\" onClick={menuClick} to=\"/Native\" />\n        <Menu.Item\n          as={Link}\n          name=\"Rewards Club\"\n          onClick={menuClick}\n          to=\"/Tokens\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n};\n\nexport default Toolbar;\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injectedConnector = new InjectedConnector({\n  supportedChainIds: [\n    1, // Mainet\n    137 //Polygon Mainnet\n  ]\n});\n","import React, { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport { formatEther, formatUnits } from \"@ethersproject/units\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { isAddress } from \"@ethersproject/address\";\nimport ERC20 from \"../contracts/erc20.json\";\nimport { Table } from \"semantic-ui-react\";\n\nconst fetcher = (library, abi) => (...args) => {\n  const [arg1, arg2, ...params] = args;\n\n  if (isAddress(arg1)) {\n    const address = arg1;\n    const method = arg2;\n    const contract = new Contract(address, abi, library.getSigner());\n    return contract[method](...params);\n  }\n\n  const method = arg1;\n  return library[method](arg2, ...params);\n};\n\nexport const Balance = () => {\n  const { account, library, chainId } = useWeb3React();\n  const { data: balance, mutate } = useSWR([\"getBalance\", account, \"latest\"], {\n    fetcher: fetcher(library, ERC20)\n  });\n\n  useEffect(() => {\n    library.on(\"block\", () => {\n      mutate(undefined, true);\n    });\n\n    return () => {\n      library.removeAllListeners(\"block\");\n    };\n  }, []);\n\n  if (!balance) {\n    return <div>...</div>;\n  }\n\n  if (chainId === 137) {\n    return <div>MATIC : {parseFloat(formatEther(balance)).toPrecision(4)}</div>;\n  } else if (chainId === 1) {\n    return <div>ETH : {parseFloat(formatEther(balance)).toPrecision(4)}</div>;\n  } else {\n    return <div>...</div>;\n  }\n};\n\nexport const TokenBalance = ({ symbol, address, decimals }) => {\n  const { account, library } = useWeb3React();\n  const { data: balance, mutate } = useSWR([address, \"balanceOf\", account], {\n    fetcher: fetcher(library, ERC20)\n  });\n\n  useEffect(() => {\n    const contract = new Contract(address, ERC20, library.getSigner());\n    const fromAcc = contract.filters.Transfer(account, null);\n    library.on(fromAcc, (from, to, amount, event) => {\n      console.log(\"Transfer|sent\", { from, to, amount, event });\n      mutate(undefined, true);\n    });\n    const toAcc = contract.filters.Transfer(null, account);\n    library.on(toAcc, (from, to, amount, event) => {\n      console.log(\"Transfer|received\", { from, to, amount, event });\n      mutate(undefined, true);\n    });\n\n    return () => {\n      library.removeAllListeners(fromAcc);\n      library.removeAllListeners(toAcc);\n    };\n  }, []);\n\n  if (!balance) {\n    return <Table.Body>...</Table.Body>;\n  }\n  return (\n    <Table.Body>\n      <Table.Cell textAlign=\"center\">{symbol}</Table.Cell>\n      <Table.Cell textAlign=\"center\">\n        {parseFloat(formatUnits(balance, decimals)).toPrecision(4)}\n      </Table.Cell>\n    </Table.Body>\n  );\n};\n\n/*\nexport const Wallet = () => {\n  const { chainId, account, activate, active } = useWeb3React();\n\n  const onClick = () => {\n    activate(injectedConnector);\n  }\n\n  return (\n    <div>\n      <h4>USER ACCOUNT</h4>\n      {active ? (\n        <div>\n          <div>ChainId: {chainId}</div>\n          <div>Account: {account}</div>   \n        </div>\n      ) : (\n        <Button primary onClick={onClick}>\n          Connect To MetaMask\n        </Button>\n      )}\n      {active && \n      <>\n        <Balance />\n        <TokenList chainId={chainId} />\n      </>\n      }\n    </div>\n  )\n}\n*/\n","import React from 'react';\nimport { Container, Button, Segment} from 'semantic-ui-react';\n\nconst Front = ({onButtonClick}) => {\n    return (\n        <Container textAlign=\"center\">\n            <Button basic color='green' onClick={onButtonClick}>\n                Connect To MetaMask\n            </Button>\n        </Container>\n        )\n}\n\nexport default Front;","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, Button, Divider } from \"semantic-ui-react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injectedConnector } from \"../web3/connectors\";\nimport { Balance } from \"../components/WalletConnector\";\nimport Front from \"../components/Front\";\nimport {\n  weeklyPerToker,\n  highestWeeklyEarner,\n  totalRewards,\n  totalWeeklyReward,\n  tokerRatio\n} from \"../dataConfig/data\";\n\nconst Home = () => {\n  const { chainId, account, activate, active } = useWeb3React();\n  const contAddress = \"0xfCB4D494013CEa160A447a09230dB84425B2cB04\";\n\n  const onButtonClick = () => {\n    activate(injectedConnector);\n  };\n  console.log(active);\n  console.log(account);\n  console.log(chainId);\n\n  const Wallet = () => {\n    return (\n      <div>\n        <h4>USER ACCOUNT/WALLET DETAILS</h4>\n        <Divider />\n        {active ? (\n          <div>\n            <div>ChainId: {chainId}</div>\n            <div>Connected Account: {account}</div>\n            <div>Contract Addresss: {contAddress}</div>\n          </div>\n        ) : (\n          <Button basic color=\"green\" onClick={onButtonClick}>\n            Connect To MetaMask\n          </Button>\n        )}\n        {active && (\n          <>\n           User Balance <Balance />\n          </>\n        )}\n        <Divider />\n\n        <br />\n        <div>\n          {\" \"}\n          <b>This Weeks Total Rewards</b> : {totalWeeklyReward}\n        </div>\n        <div>\n          {\" \"}\n          <b>This Weeks Reward per Toker</b> : {weeklyPerToker}{\" \"}\n        </div>\n        <div>\n          {\" \"}\n          <b>This Weeks Highest Return</b> : {highestWeeklyEarner}\n        </div>\n        <div>\n          {\" \"}\n          <b>Total Rewards Dispersed</b> : {totalRewards}{\" \"}\n        </div>\n        <div>\n          <b>{tokerRatio}{\" \"}</b>\n        </div>\n        <br />\n        <Divider />\n        <br />\n        <br />\n      </div>\n    );\n  };\n\n  if (active) {\n    return (\n      <Grid centered>\n        <Grid.Row>\n          <Wallet />\n        </Grid.Row>\n        <Grid.Row columns={2}>\n          <Grid.Column textAlign=\"center\">\n            <Grid.Row>\n              <h4>Matic Rewards</h4>\n            </Grid.Row>\n            <Divider />\n            <Grid.Row>\n              <Button basic color=\"green\" as={Link} to=\"/Native\">\n                Disperse Matic\n              </Button>\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <Grid.Row>\n              <h4>Other Rewards (Qi)</h4>\n            </Grid.Row>\n            <Divider />\n            <Grid.Row>\n              <Button basic color=\"green\" as={Link} to=\"/Tokens\">\n                Disperse Tokens\n              </Button>\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  return (\n    <div>\n      <Front onButtonClick={onButtonClick} />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport {\n  Form,\n  TextArea,\n  Button,\n  Grid,\n  Divider,\n  Header\n} from \"semantic-ui-react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injectedConnector } from \"../web3/connectors\";\nimport disperse from \"../contracts/Disperse.json\";\nimport { DISPERSEABI } from \"../assets/disperse\";\n\nconst UNIT = 1000000000000000000;\nconst address = \"0xfCB4D494013CEa160A447a09230dB84425B2cB04\";\n\nconst Native = () => {\n  const [textValue, setTextValue] = useState(\"\");\n  const { chainId, account, activate, active } = useWeb3React();\n  const [currency, setCurrency] = useState(\"\");\n  const ph =\n    \"(Toker Wallet Address) (Reward)\\n\" +\n    \"0x271bffabd0f79b8bd4d7a1c245b7ec5b576ea98a 20\\n\" +\n    \"0x141ca95b6177615fb1417cf70e930e102bf8f584 25\";\n\n  const onButtonClick = () => {\n    activate(injectedConnector);\n  };\n\n  const handleChange = (e) => {\n    setTextValue(e.target.value);\n  };\n\n  const handleClick = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    let tempArray = textValue.valueOf().split(/[\\s,;:\\t\\r\\n]+/);\n\n    let oddArray = tempArray.filter((v, i) => i % 2);\n    let evenArray = tempArray.filter((v, i) => !(i % 2));\n\n    let addArray = [];\n    let amtArray = [];\n    let total = 0.0;\n\n    for (let i = 0; i < evenArray.length; ++i) {\n      if (!isNaN(oddArray[i]) && parseFloat(oddArray[i]) > 0.0) {\n        addArray.push(evenArray[i].trim());\n        amtArray.push((oddArray[i] * UNIT).toString());\n        total += parseFloat(oddArray[i]);\n      }\n    }\n\n    const disperseContract = new ethers.Contract(\n      address,\n      disperse.abi,\n      provider\n    );\n    const disperseSigned = disperseContract.connect(signer);\n\n    let overrides = { value: ethers.utils.parseEther(total.toString()) };\n\n    if (addArray.length === amtArray.length && addArray.length > 0) {\n      let tx = await disperseSigned.tokerRewardsEth(\n        addArray,\n        amtArray,\n        overrides\n      );\n    } else {\n      alert(\"Please enter at least one valid transaction\");\n    }\n  };\n\n  useEffect(() => {\n    if (chainId === 137) {\n      setCurrency(\"MATIC\");\n    } else if (chainId === 1) {\n      setCurrency(\"ETHEREUM\");\n    }\n  }, [chainId]);\n\n  if ((chainId === 137 || chainId === 1) && active) {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={3}></Grid.Column>\n          <Grid.Column width={10}>\n            <Form>\n              <Form.Field>\n                <Header as=\"h2\">\n                  <Header.Content>Disperse {currency}</Header.Content>\n                </Header>\n                <Divider />\n              </Form.Field>\n              <Form.Field>\n                <p>\n                  Please enter each Toker address in a new line followed by a\n                  separator (comma,colon or blank space) and then the amount.\n                  <Divider />\n                  Connected Contract: 0xfCB4D494013CEa160A447a09230dB84425B2cB04\n                </p>\n              </Form.Field>\n              <Divider />\n              <Form.Field>\n                <TextArea placeholder={ph} onChange={handleChange} />\n              </Form.Field>\n              <Divider />\n              <Form.Field>\n                <Button basic color=\"green\" onClick={handleClick}>\n                  Disperse\n                </Button>\n              </Form.Field>\n            </Form>\n          </Grid.Column>\n          <Grid.Column width={3}></Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  } else {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={3}></Grid.Column>\n          <Grid.Column width={10}>\n            <Grid.Row>\n              {!(chainId === 137 || chainId === 1) ? (\n                <div>\n                  <p>\n                    This DAPP was created for The Midnight Tokers Club Rewards.{\" \"}\n                  </p>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </Grid.Row>\n            <Grid.Row>\n              {!active ? (\n                <Button basic color=\"green\" onClick={onButtonClick}>\n                  Connect To MetaMask\n                </Button>\n              ) : (\n                <div></div>\n              )}\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={3}></Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n};\n\nexport default Native;\n","import React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { BigNumber } from \"bignumber.js\";\r\nimport {\r\n  Form,\r\n  TextArea,\r\n  Input,\r\n  Button,\r\n  Grid,\r\n  Divider,\r\n  Header\r\n} from \"semantic-ui-react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { injectedConnector } from \"../web3/connectors\";\r\nimport disperse from \"../contracts/Disperse.json\";\r\nimport ERC20 from \"../contracts/erc20.json\";\r\nimport { DISPERSEABI } from \"../assets/disperse\";\r\n\r\nconst UNIT = 1000000000000000000;\r\nconst address = \"0xfCB4D494013CEa160A447a09230dB84425B2cB04\";\r\n\r\nconst Tokens = () => {\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const [tokenAddress, setTokenAddress] = useState(\"\");\r\n  const [disableDisperse, setDisableDisperse] = useState(true);\r\n  const [disableApprove, setDisableApprove] = useState(false);\r\n  const [addressArray, setAddressArray] = useState([]);\r\n  const [amountArray, setAmountArray] = useState([]);\r\n\r\n  const { chainId, account, activate, active } = useWeb3React();\r\n  const ph =\r\n    \"(Toker Wallet Address) (Reward)\\n\" +\r\n    \"0x271bffabd0f79b8bd4d7a1c245b7ec5b576ea98a 20\\n\" +\r\n    \"0x141ca95b6177615fb1417cf70e930e102bf8f584 25\";\r\n\r\n  const onButtonClick = () => {\r\n    activate(injectedConnector);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTextValue(e.target.value);\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setTokenAddress(e.target.value);\r\n  };\r\n\r\n  const handleTokenCalls = async () => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n  };\r\n\r\n  const handleApprove = async () => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    let tempArray = textValue.valueOf().split(/[\\s,;:\\t\\r\\n]+/);\r\n\r\n    let oddArray = tempArray.filter((v, i) => i % 2);\r\n    let evenArray = tempArray.filter((v, i) => !(i % 2));\r\n\r\n    let addArray = [];\r\n    let amtArray = [];\r\n    let total = 0.0;\r\n\r\n    for (let i = 0; i < evenArray.length; ++i) {\r\n      if (!isNaN(oddArray[i]) && parseFloat(oddArray[i]) > 0.0) {\r\n        addArray.push(evenArray[i].trim());\r\n        amtArray.push(\"0x\" + (oddArray[i] * UNIT).toString(16));\r\n        total += parseFloat(oddArray[i]);\r\n      }\r\n    }\r\n\r\n    setAddressArray(addArray);\r\n    setAmountArray(amtArray);\r\n\r\n    const erc20Contract = new ethers.Contract(tokenAddress, ERC20, provider);\r\n    const erc20Signed = erc20Contract.connect(signer);\r\n\r\n    console.log(total);\r\n\r\n    let allowance = new BigNumber(total);\r\n\r\n    allowance = allowance.multipliedBy(UNIT);\r\n    console.log(allowance.toString());\r\n    console.log(tokenAddress);\r\n    console.log(addArray);\r\n    console.log(amtArray);\r\n\r\n    const toHex = \"0x\" + allowance.toString(16);\r\n\r\n    const success = await erc20Signed.approve(address, toHex);\r\n\r\n    setDisableDisperse(false);\r\n\r\n    //let tx = await disperseSigned.disperseToken(tokenAddress,addArray,amtArray);\r\n  };\r\n\r\n  const handleDisperse = async () => {\r\n    setDisableApprove(true);\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n\r\n    const disperseContract = new ethers.Contract(\r\n      address,\r\n      disperse.abi,\r\n      provider\r\n    );\r\n    const disperseSigned = disperseContract.connect(signer);\r\n\r\n    if (addressArray.length === amountArray.length && addressArray.length > 0) {\r\n      let tx = await disperseSigned.tokerRewards(\r\n        tokenAddress,\r\n        addressArray,\r\n        amountArray\r\n      );\r\n    } else {\r\n      alert(\"Please enter at least one valid transaction\");\r\n    }\r\n\r\n    setAddressArray([]);\r\n    setAmountArray([]);\r\n    setDisableApprove(false);\r\n    setDisableDisperse(true);\r\n  };\r\n\r\n  if ((chainId === 137 || chainId === 1) && active) {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={3}></Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Form>\r\n              <Form.Field>\r\n                <Header as=\"h2\">\r\n                  <Header.Content>Midnight Tokers Rewards</Header.Content>\r\n                </Header>\r\n                <p>Quick Address Links :</p>\r\n                <p>\r\n                  QiDao : 0x580A84C73811E1839F75d86d75d88cCa0c241fF4 <br />\r\n                  Matic : 0x0000000000000000000000000000000000001010 <br />\r\n                </p>\r\n              </Form.Field>\r\n              <Form.Field>\r\n                <Input\r\n                  focus\r\n                  placeholder=\"Enter ERC20 Contract Address\"\r\n                  onChange={handleInput}\r\n                />\r\n              </Form.Field>\r\n              <Divider />\r\n              <Form.Field>\r\n                <p>\r\n                  Please enter each Midnight Toker's Wallet Address in a new\r\n                  line followed by a separator (comma,colon or blank space will\r\n                  work) and then the amount.\r\n                </p>\r\n              </Form.Field>\r\n              <Divider />\r\n              <Form.Field>\r\n                <TextArea focus placeholder={ph} onChange={handleChange} />\r\n              </Form.Field>\r\n              Approve QTY to contract, & Disperse.\r\n              <Divider />\r\n              <Form.Field>\r\n                <Button\r\n                  basic\r\n                  color=\"green\"\r\n                  onClick={async () => handleApprove()}\r\n                  disabled={disableApprove}\r\n                >\r\n                  Approve\r\n                </Button>\r\n                <Button\r\n                  basic\r\n                  color=\"green\"\r\n                  onClick={async () => handleDisperse()}\r\n                  disabled={disableDisperse}\r\n                >\r\n                  Disperse\r\n                </Button>\r\n              </Form.Field>\r\n            </Form>\r\n          </Grid.Column>\r\n          <Grid.Column width={3}></Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={3}></Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Grid.Row>\r\n              {!(chainId === 137 || chainId === 1) ? (\r\n                <div>\r\n                  <p>\r\n                    This dapp was created for The Midnight Tokers Club Rewards\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              {!active ? (\r\n                <Button basic color=\"green\" onClick={onButtonClick}>\r\n                  Connect To MetaMask\r\n                </Button>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={3}></Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Tokens;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nimport Toolbar from \"./components/Toolbar\";\nimport Home from \"./containers/Home\";\nimport Native from \"./containers/Native\";\nimport Tokens from \"./containers/Tokens\";\n\nfunction getLibrary(provider, connector) {\n  return new Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <Toolbar />\n        <Switch>\n          <Route path=\"/Tokens\">\n            <Tokens />\n          </Route>\n          <Route path=\"/Native\">\n            <Native />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Web3ReactProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}